C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN LCD.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE c\LCD.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\LCD.lst) 
                    -OBJECT(LCD.obj)

line level    source

   1          #include "H/LCD.h"
   2          unsigned char isReflash = 0;
   3          /************************LCD Region End***************************/
   4          #if 1
   5          /*
   6          LCD 说明:
   7          1、S1：S1显示时，表示负数
   8          2、OBC,1,2,S2,3，4：表示温度摄氏度或华氏度，S2表示小数点，4表示单位C/F
   9          3、5，6，S3，7：表示signal
  10          4、8表示HOLD：H是HOLD
  11          5、9表示MODE：A，B，C，D
  12          */
  13          unsigned char xdata LCDRAM[LCD_BUF_LEN]  _at_  0x700;
  14          unsigned char xdata LCDTemp[LCD_BUF_LEN];
  15          
  16          void LCD_Init(void)
  17          {
  18   1              char i;
  19   1              DDRCON = 0xB0;    //-xyy zzzz  x:LCD/LED模式 y:占空比  z:LCD电压调节
  20   1              P0VO = 0xFC;
  21   1              P1VO = 0x04;
  22   1              P2VO = 0x3F;
  23   1              P3VO = 0xFF;
  24   1              OTCON = 0x04;    //---- xxyz  x:LCD分压电阻 y:复位管脚选择 z:LCD偏置电压
  25   1              for(i=0;i<LCD_BUF_LEN;i++)
  26   1              {
  27   2                      LCDTemp[i] = 0x00;
  28   2              }
  29   1      }
  30          void LED_Init(void)
  31          {
  32   1              unsigned int i;
  33   1              DDRCON = 0xF0;    //-xyy zzzz  x:LCD/LED模式 y:占空比1/8:00 1/6:01 1/5:10 1/4:11  z:LCD电压调节
  34   1              
  35   1              P0VO = 0x1C;
  36   1              P1VO = 0x04;
  37   1              P2VO = 0x3F;
  38   1              P3VO = 0xFF;
  39   1              
  40   1              OTCON = 0x04;    //---- xxyz  x:LCD分压电阻 y:复位管脚选择 z:LCD偏置电压
  41   1      
  42   1              for(i=0;i<LCD_BUF_LEN;i++)
  43   1              {
  44   2                      LCDTemp[i] = 0x00;
  45   2              }       
  46   1      }
  47          
  48          #endif
  49          /************************LCD Region End***************************/
  50          
  51          
  52          #if 1   //Tmp unit
  53          code unsigned char Temp_C[1]=
  54          {
C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 2   

  55                  190
  56          };
  57          code unsigned char Temp_F[1]=
  58          {
  59                  0
  60          };
  61          code unsigned char Temp_CF_8[1]=
  62          {
  63                  190
  64          };
  65          void LCD_Temperature(TEMPERATURE eTemp)
  66          {       
  67   1              char i;
  68   1              short bits;
  69   1              unsigned char * pData = 0;
  70   1              for(i=0;i<sizeof(Temp_CF_8);i++)
  71   1              {
  72   2                      bits = Temp_CF_8[i];
  73   2                      LCDTemp[bits>>3] &= ~(1<<(bits&0x07));
  74   2              }
  75   1              i = 0;
  76   1              if (eTemp == eTEMP_C)
  77   1              {               
  78   2                      pData = Temp_C;
  79   2                      i = sizeof(Temp_C);
  80   2              }
  81   1      //      else
  82   1      //      {
  83   1      //              pData = Temp_F;
  84   1      //              i = sizeof(Temp_C);
  85   1      //      }
  86   1              for(i = i -1;i>=0;i--)
  87   1              {
  88   2                      bits = pData[i];
  89   2                      LCDTemp[bits>>3] |= 1<<(bits&0x07);
  90   2              }
  91   1              isReflash = 1;
  92   1      }
  93          #endif
  94          #if 1   //MODE
  95          code unsigned char Mode_A[1]=
  96          {
  97                  196,
  98          };
  99          
 100          code unsigned char Mode_B[1]=
 101          {
 102                  197,
 103          };
 104          code unsigned char Mode_C[1]=
 105          {
 106                  198,
 107          };
 108          code unsigned char Mode_D[1]=
 109          {
 110                  199,
 111          };
 112          code unsigned char Mode_8[4]=
 113          {
 114                  196,197,198,199
 115          };
 116          void LCD_Mode(MODETYPE eMode)
C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 3   

 117          {       
 118   1              char i;
 119   1              short bits;
 120   1              unsigned char * pData = 0;
 121   1              
 122   1              for(i=0;i<sizeof(Mode_8);i++)
 123   1              {
 124   2                      bits = Mode_8[i];
 125   2                      LCDTemp[bits>>3] &= ~(1<<(bits&0x07));
 126   2              }
 127   1              if (eMode == eMODEA)
 128   1              {
 129   2                      pData = Mode_A;
 130   2                      i = sizeof(Mode_A);
 131   2              }
 132   1              else if (eMode == eMODEB)
 133   1              {
 134   2                      pData = Mode_B;
 135   2                      i = sizeof(Mode_B);
 136   2              }
 137   1              else if (eMode == eMODEC)
 138   1              {
 139   2                      pData = Mode_C;
 140   2                      i = sizeof(Mode_C);
 141   2              }
 142   1              else if (eMode == eMODED)
 143   1              {
 144   2                      pData = Mode_D;
 145   2                      i = sizeof(Mode_D);
 146   2              }
 147   1              for(i = i -1;i>=0;i--)
 148   1              {
 149   2                      bits = pData[i];
 150   2                      LCDTemp[bits>>3] |= 1<<(bits&0x07);
 151   2              }
 152   1              isReflash = 1;
 153   1      }
 154          #endif
 155          #if 1   //HOLD
 156          code unsigned char Hold[1]=
 157          {
 158                  188,
 159          };
 160          void Lcd_Hold(HOLDTYPE eHold)
 161          {
 162   1              char i;
 163   1              short bits;
 164   1              unsigned char * pData = 0;
 165   1              
 166   1              if (eHold == eHOLD_DISABLE)
 167   1              {
 168   2                      for(i=0;i<sizeof(Hold);i++)
 169   2                      {
 170   3                              bits = Hold[i];
 171   3                              LCDTemp[bits>>3] &= ~(1<<(bits&0x07));
 172   3                      }
 173   2              }
 174   1              else
 175   1              {
 176   2                      pData = Hold;
 177   2                      i = sizeof(Hold);
 178   2                      for(i = i -1;i>=0;i--)
C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 4   

 179   2                      {
 180   3                              bits = pData[i];
 181   3                              LCDTemp[bits>>3] |= 1<<(bits&0x07);
 182   3                      }
 183   2              }
 184   1              isReflash = 1;
 185   1      }
 186          #endif
 187          
 188          
 189          #if 1   //BAT
 190          code unsigned char Bat_1_Bits[1]=
 191          {
 192                  191,
 193          };
 194          code unsigned char Bat_2_Bits[2]=
 195          {
 196                  191,189
 197          };
 198          void LCD_Bat(unsigned char level)
 199          {       
 200   1              char i;
 201   1              short bits;
 202   1              unsigned char * pData = 0;
 203   1              
 204   1              for(i=0;i<sizeof(Bat_2_Bits);i++)
 205   1              {
 206   2                      bits = Bat_2_Bits[i];
 207   2                      LCDTemp[bits>>3] &= ~(1<<(bits&0x07));
 208   2              }
 209   1              i = 0;
 210   1              if (level == 1)
 211   1              {
 212   2                      pData = Bat_1_Bits;
 213   2                      i = sizeof(Bat_1_Bits);
 214   2              }
 215   1              else if (level == 2)
 216   1              {
 217   2                      pData = Bat_2_Bits;
 218   2                      i = sizeof(Bat_2_Bits);
 219   2              }
 220   1              for(i = i -1;i>=0;i--)
 221   1              {
 222   2                      bits = pData[i];
 223   2                      LCDTemp[bits>>3] |= 1<<(bits&0x07);
 224   2              }
 225   1              isReflash = 1;
 226   1      }
 227          #endif
 228          #if 1   //Signal
 229          code unsigned char Signal_10_0_Bits[6]=
 230          {
 231                  109,111,116,117,118,119
 232          };
 233          code unsigned char Signal_10_1_Bits[2]=
 234          {
 235                  117,118
 236          };
 237          code unsigned char Signal_10_2_Bits[5]=
 238          {
 239                  110,111,116,117,119
 240          };
C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 5   

 241          code unsigned char Signal_10_3_Bits[5]=
 242          {
 243                  110,116,117,118,119
 244          };
 245          code unsigned char Signal_10_4_Bits[4]=
 246          {
 247                  109,110,117,118
 248          };
 249          code unsigned char Signal_10_5_Bits[5]=
 250          {
 251                  109,110,116,118,119
 252          };
 253          code unsigned char Signal_10_6_Bits[6]=
 254          {
 255                  109,110,111,116,118,119
 256          };
 257          code unsigned char Signal_10_7_Bits[3]=
 258          {
 259                  116,117,118
 260          };
 261          code unsigned char Signal_10_8_Bits[7]=
 262          {
 263                  109,110,111,116,117,118,119
 264          };
 265          code unsigned char Signal_10_9_Bits[6]=
 266          {
 267                  109,110,116,117,118,119
 268          };
 269          
 270          
 271          code unsigned char Signal_1_0_Bits[6]=
 272          {
 273                  125,127,132,133,134,135
 274          };
 275          code unsigned char Signal_1_1_Bits[2]=
 276          {
 277                  133,134
 278          };
 279          code unsigned char Signal_1_2_Bits[5]=
 280          {
 281                  126,127,132,133,135
 282          };
 283          code unsigned char Signal_1_3_Bits[5]=
 284          {
 285                  126,132,133,134,135
 286          };
 287          code unsigned char Signal_1_4_Bits[4]=
 288          {
 289                  125,126,133,134
 290          };
 291          code unsigned char Signal_1_5_Bits[5]=
 292          {
 293                  125,126,132,134,135
 294          };
 295          code unsigned char Signal_1_6_Bits[6]=
 296          {
 297                  125,126,127,132,134,135
 298          };
 299          code unsigned char Signal_1_7_Bits[3]=
 300          {
 301                  132,133,134
 302          };
C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 6   

 303          code unsigned char Signal_1_8_Bits[7]=
 304          {
 305                  125,126,127,132,133,134,135
 306          };
 307          code unsigned char Signal_1_9_Bits[6]=
 308          {
 309                  125,126,132,133,134,135
 310          };
 311          
 312          
 313          code unsigned char Signal_0_0_Bits[7]=
 314          {
 315                  140,141,143,180,181,182,183
 316          };
 317          code unsigned char Signal_0_1_Bits[3]=
 318          {
 319                  140,181,182
 320          };
 321          code unsigned char Signal_0_2_Bits[6]=
 322          {
 323                  140,142,143,180,181,183
 324          };
 325          code unsigned char Signal_0_3_Bits[6]=
 326          {
 327                  140,142,180,181,182,183
 328          };
 329          code unsigned char Signal_0_4_Bits[5]=
 330          {
 331                  140,141,142,181,182
 332          };
 333          code unsigned char Signal_0_5_Bits[6]=
 334          {
 335                  140,141,142,180,182,183
 336          };
 337          code unsigned char Signal_0_6_Bits[7]=
 338          {
 339                  140,141,142,143,180,182,183
 340          };
 341          code unsigned char Signal_0_7_Bits[4]=
 342          {
 343                  140,180,181,182
 344          };
 345          code unsigned char Signal_0_8_Bits[8]=
 346          {
 347                  140,141,142,143,180,181,182,183
 348          };
 349          code unsigned char Signal_0_9_Bits[7]=
 350          {
 351                  140,141,142,180,181,182,183
 352          };
 353          void LCD_Signal_10(unsigned short usSignal)
 354          {
 355   1              char i;
 356   1              short bits;
 357   1              unsigned char * pData = 0;
 358   1              if (usSignal >= 999)
 359   1                      bits = 999;
 360   1              else
 361   1                      bits = usSignal;
 362   1              bits =  (bits/100);
 363   1              i = 0;
 364   1              if (bits == 0)
C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 7   

 365   1              {
 366   2      //              pData = Signal_10_0_Bits;
 367   2      //              i = sizeof(Signal_10_0_Bits);
 368   2              }
 369   1              else if (bits == 1)
 370   1              {
 371   2                      pData = Signal_10_1_Bits;
 372   2                      i = sizeof(Signal_10_1_Bits);
 373   2              }
 374   1              else if (bits == 2)
 375   1              {
 376   2                      pData = Signal_10_2_Bits;
 377   2                      i = sizeof(Signal_10_2_Bits);
 378   2              }
 379   1              else if (bits == 3)
 380   1              {
 381   2                      pData = Signal_10_3_Bits;
 382   2                      i = sizeof(Signal_10_3_Bits);
 383   2              }
 384   1              else if (bits == 4)
 385   1              {
 386   2                      pData = Signal_10_4_Bits;
 387   2                      i = sizeof(Signal_10_4_Bits);
 388   2              }
 389   1              else if (bits == 5)
 390   1              {
 391   2                      pData = Signal_10_5_Bits;
 392   2                      i = sizeof(Signal_10_5_Bits);
 393   2              }
 394   1              else if (bits == 6)
 395   1              {
 396   2                      pData = Signal_10_6_Bits;
 397   2                      i = sizeof(Signal_10_6_Bits);
 398   2              }
 399   1              else if (bits == 7)
 400   1              {
 401   2                      pData = Signal_10_7_Bits;
 402   2                      i = sizeof(Signal_10_7_Bits);
 403   2              }
 404   1              else if (bits == 8)
 405   1              {
 406   2                      pData = Signal_10_8_Bits;
 407   2                      i = sizeof(Signal_10_8_Bits);
 408   2              }
 409   1              else if (bits == 9)
 410   1              {
 411   2                      pData = Signal_10_9_Bits;
 412   2                      i = sizeof(Signal_10_9_Bits);
 413   2              }
 414   1              for(i = i -1;i>=0;i--)
 415   1              {
 416   2                      bits = pData[i];
 417   2                      LCDTemp[bits>>3] |= 1<<(bits&0x07);
 418   2              }
 419   1      }
 420          void LCD_Signal_1(unsigned short usSignal)
 421          {
 422   1              char i;
 423   1              short bits;
 424   1              unsigned char * pData = 0;
 425   1              
 426   1              usSignal %= 100;
C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 8   

 427   1              bits = (usSignal / 10);
 428   1              if (bits == 0)
 429   1              {
 430   2                      pData = Signal_1_0_Bits;
 431   2                      i = sizeof(Signal_1_0_Bits);
 432   2              }
 433   1              else if (bits == 1)
 434   1              {
 435   2                      pData = Signal_1_1_Bits;
 436   2                      i = sizeof(Signal_1_1_Bits);
 437   2              }
 438   1              else if (bits == 2)
 439   1              {
 440   2                      pData = Signal_1_2_Bits;
 441   2                      i = sizeof(Signal_1_2_Bits);
 442   2              }
 443   1              else if (bits == 3)
 444   1              {
 445   2                      pData = Signal_1_3_Bits;
 446   2                      i = sizeof(Signal_1_3_Bits);
 447   2              }
 448   1              else if (bits == 4)
 449   1              {
 450   2                      pData = Signal_1_4_Bits;
 451   2                      i = sizeof(Signal_1_4_Bits);
 452   2              }
 453   1              else if (bits == 5)
 454   1              {
 455   2                      pData = Signal_1_5_Bits;
 456   2                      i = sizeof(Signal_1_5_Bits);
 457   2              }
 458   1              else if (bits == 6)
 459   1              {
 460   2                      pData = Signal_1_6_Bits;
 461   2                      i = sizeof(Signal_1_6_Bits);
 462   2              }
 463   1              else if (bits == 7)
 464   1              {
 465   2                      pData = Signal_1_7_Bits;
 466   2                      i = sizeof(Signal_1_7_Bits);
 467   2              }
 468   1              else if (bits == 8)
 469   1              {
 470   2                      pData = Signal_1_8_Bits;
 471   2                      i = sizeof(Signal_1_8_Bits);
 472   2              }
 473   1              else if (bits == 9)
 474   1              {
 475   2                      pData = Signal_1_9_Bits;
 476   2                      i = sizeof(Signal_1_9_Bits);
 477   2              }
 478   1              for(i = i -1;i>=0;i--)
 479   1              {
 480   2                      bits = pData[i];
 481   2                      LCDTemp[bits>>3] |= 1<<(bits&0x07);
 482   2              }
 483   1      }
 484          void LCD_Signal_0(unsigned short usSignal)
 485          {
 486   1              char i;
 487   1              short bits;
 488   1              unsigned char * pData = 0;
C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 9   

 489   1              
 490   1              bits = usSignal;
 491   1              if (bits == 0)
 492   1              {
 493   2                      pData = Signal_0_0_Bits;
 494   2                      i = sizeof(Signal_0_0_Bits);
 495   2              }
 496   1              else if (bits == 1)
 497   1              {
 498   2                      pData = Signal_0_1_Bits;
 499   2                      i = sizeof(Signal_0_1_Bits);
 500   2              }
 501   1              else if (bits == 2)
 502   1              {
 503   2                      pData = Signal_0_2_Bits;
 504   2                      i = sizeof(Signal_0_2_Bits);
 505   2              }
 506   1              else if (bits == 3)
 507   1              {
 508   2                      pData = Signal_0_3_Bits;
 509   2                      i = sizeof(Signal_0_3_Bits);
 510   2              }
 511   1              else if (bits == 4)
 512   1              {
 513   2                      pData = Signal_0_4_Bits;
 514   2                      i = sizeof(Signal_0_4_Bits);
 515   2              }
 516   1              else if (bits == 5)
 517   1              {
 518   2                      pData = Signal_0_5_Bits;
 519   2                      i = sizeof(Signal_0_5_Bits);
 520   2              }
 521   1              else if (bits == 6)
 522   1              {
 523   2                      pData = Signal_0_6_Bits;
 524   2                      i = sizeof(Signal_0_6_Bits);
 525   2              }
 526   1              else if (bits == 7)
 527   1              {
 528   2                      pData = Signal_0_7_Bits;
 529   2                      i = sizeof(Signal_0_7_Bits);
 530   2              }
 531   1              else if (bits == 8)
 532   1              {
 533   2                      pData = Signal_0_8_Bits;
 534   2                      i = sizeof(Signal_0_8_Bits);
 535   2              }
 536   1              else if (bits == 9)
 537   1              {
 538   2                      pData = Signal_0_9_Bits;
 539   2                      i = sizeof(Signal_0_9_Bits);
 540   2              }
 541   1              for(i = i -1;i>=0;i--)
 542   1              {
 543   2                      bits = pData[i];
 544   2                      LCDTemp[bits>>3] |= 1<<(bits&0x07);
 545   2              }
 546   1      }
 547          
 548          void LCD_Signal(unsigned short signal)
 549          {
 550   1              char i;
C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 10  

 551   1              short bits;
 552   1              unsigned char * pData = 0;
 553   1                      
 554   1              {
 555   2                      //清除十分位，个位，十位
 556   2                      for(i=0;i<sizeof(Signal_10_8_Bits);i++)
 557   2                      {
 558   3                              bits = Signal_10_8_Bits[i];
 559   3                              LCDTemp[bits>>3] &= ~(1<<(bits&0x07));
 560   3                      }
 561   2                      for(i=0;i<sizeof(Signal_1_8_Bits);i++)
 562   2                      {
 563   3                              bits = Signal_1_8_Bits[i];
 564   3                              LCDTemp[bits>>3] &= ~(1<<(bits&0x07));
 565   3                      }
 566   2                      for(i=0;i<sizeof(Signal_0_8_Bits);i++)
 567   2                      {
 568   3                              bits = Signal_0_8_Bits[i];
 569   3                              LCDTemp[bits>>3] &= ~(1<<(bits&0x07));
 570   3                      }
 571   2              }
 572   1              //十位
 573   1              LCD_Signal_10(signal);
 574   1              if (signal >= 100)
 575   1                      signal -= 100;
 576   1              //个位
 577   1              LCD_Signal_1(signal);
 578   1              //十分位
 579   1              signal = signal % 10;
 580   1              LCD_Signal_0(signal);
 581   1              
 582   1              isReflash = 1;
 583   1      }
 584          #endif
 585          #if 1   //NTC
 586          #if 1   //Temp Num
 587          code unsigned char Temp_100_Bits[1]=
 588          {
 589                  4,
 590          };
 591          code unsigned char Temp_10_0_Bits[6]=
 592          {
 593                  5,7,12,13,14,15
 594          };
 595          code unsigned char Temp_10_1_Bits[2]=
 596          {
 597                  13,14
 598          };
 599          code unsigned char Temp_10_2_Bits[5]=
 600          {
 601                  6,7,12,13,15
 602          };
 603          code unsigned char Temp_10_3_Bits[5]=
 604          {
 605                  6,12,13,14,15
 606          };
 607          code unsigned char Temp_10_4_Bits[4]=
 608          {
 609                  5,6,13,14
 610          };
 611          code unsigned char Temp_10_5_Bits[5]=
 612          {
C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 11  

 613                  5,6,12,14,15
 614          };
 615          code unsigned char Temp_10_6_Bits[6]=
 616          {
 617                  5,6,7,12,14,15
 618          };
 619          code unsigned char Temp_10_7_Bits[3]=
 620          {
 621                  12,13,14
 622          };
 623          code unsigned char Temp_10_8_Bits[7]=
 624          {
 625                  5,6,7,12,13,14,15
 626          };
 627          code unsigned char Temp_10_9_Bits[6]=
 628          {
 629                  5,6,12,13,14,15
 630          };
 631          
 632          
 633          code unsigned char Temp_1_0_Bits[6]=
 634          {
 635                  21,23,28,29,30,31
 636          };
 637          code unsigned char Temp_1_1_Bits[2]=
 638          {
 639                  29,30
 640          };
 641          code unsigned char Temp_1_2_Bits[5]=
 642          {
 643                  22,23,28,29,31
 644          };
 645          code unsigned char Temp_1_3_Bits[5]=
 646          {
 647                  22,28,29,30,31
 648          };
 649          code unsigned char Temp_1_4_Bits[4]=
 650          {
 651                  21,22,29,30
 652          };
 653          code unsigned char Temp_1_5_Bits[5]=
 654          {
 655                  21,22,28,30,31
 656          };
 657          code unsigned char Temp_1_6_Bits[6]=
 658          {
 659                  21,22,23,28,30,31
 660          };
 661          code unsigned char Temp_1_7_Bits[3]=
 662          {
 663                  28,29,30
 664          };
 665          code unsigned char Temp_1_8_Bits[7]=
 666          {
 667                  21,22,23,28,29,30,31
 668          };
 669          code unsigned char Temp_1_9_Bits[6]=
 670          {
 671                  21,22,28,29,30,31
 672          };
 673          
 674          
C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 12  

 675          code unsigned char Temp_0_0_Bits[7]=
 676          {
 677                  52,53,55,100,101,102,103
 678          };
 679          code unsigned char Temp_0_1_Bits[3]=
 680          {
 681                  52,101,102
 682          };
 683          code unsigned char Temp_0_2_Bits[6]=
 684          {
 685                  52,54,55,100,101,103
 686          };
 687          code unsigned char Temp_0_3_Bits[6]=
 688          {
 689                  52,54,100,101,102,103
 690          };
 691          code unsigned char Temp_0_4_Bits[5]=
 692          {
 693                  52,53,54,101,102
 694          };
 695          code unsigned char Temp_0_5_Bits[6]=
 696          {
 697                  52,53,54,100,102,103
 698          };
 699          code unsigned char Temp_0_6_Bits[7]=
 700          {
 701                  52,53,54,55,100,102,103
 702          };
 703          code unsigned char Temp_0_7_Bits[4]=
 704          {
 705                  52,100,101,102
 706          };
 707          code unsigned char Temp_0_8_Bits[8]=
 708          {
 709                  52,53,54,55,100,101,102,103
 710          };
 711          code unsigned char Temp_0_9_Bits[7]=
 712          {
 713                  52,53,54,100,101,102,103
 714          };
 715          #endif
 716          
 717          void LCD_NTC_100(unsigned short usNtc)
 718          {
 719   1              char i;
 720   1              short bits;
 721   1              
 722   1              if (usNtc >= 1000)      //显示百位
 723   1              {
 724   2                      for(i=0;i<sizeof(Temp_100_Bits);i++)
 725   2                      {
 726   3                              bits = Temp_100_Bits[i];
 727   3                              LCDTemp[bits>>3] |= 1<<(bits&0x07);
 728   3                      }
 729   2              }
 730   1              else    //清除百位
 731   1              {
 732   2                      for(i=0;i<sizeof(Temp_100_Bits);i++)
 733   2                      {
 734   3                              bits = Temp_100_Bits[i];
 735   3                              LCDTemp[bits>>3] &= ~(1<<(bits&0x07));
 736   3                      }
C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 13  

 737   2              }
 738   1      
 739   1      }
 740          void LCD_NTC_10(unsigned short usNtc)
 741          {
 742   1              char i;
 743   1              short bits;
 744   1              unsigned char * pData = 0;
 745   1              if (usNtc >= 1000)
 746   1                      bits = usNtc - 1000;
 747   1              else
 748   1                      bits = usNtc;
 749   1              bits =  (bits/100);
 750   1              i = 0;
 751   1              if ((bits == 0) && (usNtc >= 1000))
 752   1              {
 753   2                      pData = Temp_10_0_Bits;
 754   2                      i = sizeof(Temp_10_0_Bits);
 755   2              }
 756   1              else if (bits == 1)
 757   1              {
 758   2                      pData = Temp_10_1_Bits;
 759   2                      i = sizeof(Temp_10_1_Bits);
 760   2              }
 761   1              else if (bits == 2)
 762   1              {
 763   2                      pData = Temp_10_2_Bits;
 764   2                      i = sizeof(Temp_10_2_Bits);
 765   2              }
 766   1              else if (bits == 3)
 767   1              {
 768   2                      pData = Temp_10_3_Bits;
 769   2                      i = sizeof(Temp_10_3_Bits);
 770   2              }
 771   1              else if (bits == 4)
 772   1              {
 773   2                      pData = Temp_10_4_Bits;
 774   2                      i = sizeof(Temp_10_4_Bits);
 775   2              }
 776   1              else if (bits == 5)
 777   1              {
 778   2                      pData = Temp_10_5_Bits;
 779   2                      i = sizeof(Temp_10_5_Bits);
 780   2              }
 781   1              else if (bits == 6)
 782   1              {
 783   2                      pData = Temp_10_6_Bits;
 784   2                      i = sizeof(Temp_10_6_Bits);
 785   2              }
 786   1              else if (bits == 7)
 787   1              {
 788   2                      pData = Temp_10_7_Bits;
 789   2                      i = sizeof(Temp_10_7_Bits);
 790   2              }
 791   1              else if (bits == 8)
 792   1              {
 793   2                      pData = Temp_10_8_Bits;
 794   2                      i = sizeof(Temp_10_8_Bits);
 795   2              }
 796   1              else if (bits == 9)
 797   1              {
 798   2                      pData = Temp_10_9_Bits;
C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 14  

 799   2                      i = sizeof(Temp_10_9_Bits);
 800   2              }
 801   1              for(i = i -1;i>=0;i--)
 802   1              {
 803   2                      bits = pData[i];
 804   2                      LCDTemp[bits>>3] |= 1<<(bits&0x07);
 805   2              }
 806   1      }
 807          void LCD_NTC_1(unsigned short usNtc)
 808          {
 809   1              char i;
 810   1              short bits;
 811   1              unsigned char * pData = 0;
 812   1              
 813   1              usNtc %= 100;
 814   1              bits = (usNtc / 10);
 815   1              if (bits == 0)
 816   1              {
 817   2                      pData = Temp_1_0_Bits;
 818   2                      i = sizeof(Temp_1_0_Bits);
 819   2              }
 820   1              else if (bits == 1)
 821   1              {
 822   2                      pData = Temp_1_1_Bits;
 823   2                      i = sizeof(Temp_1_1_Bits);
 824   2              }
 825   1              else if (bits == 2)
 826   1              {
 827   2                      pData = Temp_1_2_Bits;
 828   2                      i = sizeof(Temp_1_2_Bits);
 829   2              }
 830   1              else if (bits == 3)
 831   1              {
 832   2                      pData = Temp_1_3_Bits;
 833   2                      i = sizeof(Temp_1_3_Bits);
 834   2              }
 835   1              else if (bits == 4)
 836   1              {
 837   2                      pData = Temp_1_4_Bits;
 838   2                      i = sizeof(Temp_1_4_Bits);
 839   2              }
 840   1              else if (bits == 5)
 841   1              {
 842   2                      pData = Temp_1_5_Bits;
 843   2                      i = sizeof(Temp_1_5_Bits);
 844   2              }
 845   1              else if (bits == 6)
 846   1              {
 847   2                      pData = Temp_1_6_Bits;
 848   2                      i = sizeof(Temp_1_6_Bits);
 849   2              }
 850   1              else if (bits == 7)
 851   1              {
 852   2                      pData = Temp_1_7_Bits;
 853   2                      i = sizeof(Temp_1_7_Bits);
 854   2              }
 855   1              else if (bits == 8)
 856   1              {
 857   2                      pData = Temp_1_8_Bits;
 858   2                      i = sizeof(Temp_1_8_Bits);
 859   2              }
 860   1              else if (bits == 9)
C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 15  

 861   1              {
 862   2                      pData = Temp_1_9_Bits;
 863   2                      i = sizeof(Temp_1_9_Bits);
 864   2              }
 865   1              for(i = i -1;i>=0;i--)
 866   1              {
 867   2                      bits = pData[i];
 868   2                      LCDTemp[bits>>3] |= 1<<(bits&0x07);
 869   2              }
 870   1      }
 871          void LCD_NTC_0(unsigned short usNtc)
 872          {
 873   1              char i;
 874   1              short bits;
 875   1              unsigned char * pData = 0;
 876   1              
 877   1              bits = usNtc;
 878   1              if (bits == 0)
 879   1              {
 880   2                      pData = Temp_0_0_Bits;
 881   2                      i = sizeof(Temp_0_0_Bits);
 882   2              }
 883   1              else if (bits == 1)
 884   1              {
 885   2                      pData = Temp_0_1_Bits;
 886   2                      i = sizeof(Temp_0_1_Bits);
 887   2              }
 888   1              else if (bits == 2)
 889   1              {
 890   2                      pData = Temp_0_2_Bits;
 891   2                      i = sizeof(Temp_0_2_Bits);
 892   2              }
 893   1              else if (bits == 3)
 894   1              {
 895   2                      pData = Temp_0_3_Bits;
 896   2                      i = sizeof(Temp_0_3_Bits);
 897   2              }
 898   1              else if (bits == 4)
 899   1              {
 900   2                      pData = Temp_0_4_Bits;
 901   2                      i = sizeof(Temp_0_4_Bits);
 902   2              }
 903   1              else if (bits == 5)
 904   1              {
 905   2                      pData = Temp_0_5_Bits;
 906   2                      i = sizeof(Temp_0_5_Bits);
 907   2              }
 908   1              else if (bits == 6)
 909   1              {
 910   2                      pData = Temp_0_6_Bits;
 911   2                      i = sizeof(Temp_0_6_Bits);
 912   2              }
 913   1              else if (bits == 7)
 914   1              {
 915   2                      pData = Temp_0_7_Bits;
 916   2                      i = sizeof(Temp_0_7_Bits);
 917   2              }
 918   1              else if (bits == 8)
 919   1              {
 920   2                      pData = Temp_0_8_Bits;
 921   2                      i = sizeof(Temp_0_8_Bits);
 922   2              }
C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 16  

 923   1              else if (bits == 9)
 924   1              {
 925   2                      pData = Temp_0_9_Bits;
 926   2                      i = sizeof(Temp_0_9_Bits);
 927   2              }
 928   1              for(i = i -1;i>=0;i--)
 929   1              {
 930   2                      bits = pData[i];
 931   2                      LCDTemp[bits>>3] |= 1<<(bits&0x07);
 932   2              }
 933   1      }
 934          void LCD_NTC(short usNtc)
 935          {
 936   1              char i;
 937   1              short bits;
 938   1              unsigned char * pData = 0;
 939   1              
 940   1              if (usNtc < 0)
 941   1              {
 942   2                      usNtc = -usNtc;
 943   2                      //设置负号
 944   2                      LCDTemp[20>>3] |= 1<<(20&0x07);
 945   2              }
 946   1              else
 947   1              {
 948   2                      //清除负号
 949   2                      LCDTemp[20>>3] &= ~(1<<(20&0x07));
 950   2              }
 951   1              LCD_NTC_100(usNtc);
 952   1              
 953   1              {
 954   2                      //清除十分位，个位，十位
 955   2                      for(i=0;i<sizeof(Temp_10_8_Bits);i++)
 956   2                      {
 957   3                              bits = Temp_10_8_Bits[i];
 958   3                              LCDTemp[bits>>3] &= ~(1<<(bits&0x07));
 959   3                      }
 960   2                      for(i=0;i<sizeof(Temp_1_8_Bits);i++)
 961   2                      {
 962   3                              bits = Temp_1_8_Bits[i];
 963   3                              LCDTemp[bits>>3] &= ~(1<<(bits&0x07));
 964   3                      }
 965   2                      for(i=0;i<sizeof(Temp_0_8_Bits);i++)
 966   2                      {
 967   3                              bits = Temp_0_8_Bits[i];
 968   3                              LCDTemp[bits>>3] &= ~(1<<(bits&0x07));
 969   3                      }
 970   2              }
 971   1              //十位
 972   1              LCD_NTC_10(usNtc);
 973   1              if (usNtc >= 1000)
 974   1                      usNtc -= 1000;
 975   1              //个位
 976   1              LCD_NTC_1(usNtc);
 977   1              //十分位
 978   1              usNtc = usNtc % 10;
 979   1              LCD_NTC_0(usNtc);
 980   1              
 981   1              isReflash = 1;
 982   1      }
 983          
 984          #endif
C51 COMPILER V9.54   LCD                                                                   09/20/2020 17:02:52 PAGE 17  

 985          void LCD_Reflash(void)
 986          {
 987   1              unsigned char i;
 988   1              if (isReflash)
 989   1              {
 990   2                      isReflash = 0;
 991   2                      for(i=0;i<LCD_BUF_LEN;i++)
 992   2                      {
 993   3                              LCDRAM[i] = LCDTemp[i];
 994   3                      }
 995   2              }
 996   1      }
 997          //LED 1,0,1
 998          //LED 2,2,3
 999          //LED 3,7,12
1000          //LED 4,13,14
1001          //LED 5,15,16
1002          //LED 6,17,22
1003          //LED 7,23,24
1004          /*
1005          S3:表示HOLD
1006          LED7 左边2竖表示电量
1007          LED7 中间横线表示C/F，亮了表示C
1008          LED7 其他4个分别表示MODE A，B，C，D
1009          */
1010          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4643    ----
   CONSTANT SIZE    =    330    ----
   XDATA SIZE       =     26      70
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
